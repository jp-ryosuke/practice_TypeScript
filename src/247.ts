//条件演算子 3項演算子

import { createInterface } from "readline";

const rl = createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.question('数値を入力してください:', (line) => {
    const num = Number(line);

    const message = 0 <= num && num < 100
    ? `${num} は0以上100未満です`
    : `${num} は0以上100未満ではありません`;
    
    console.log(message);
    rl.close();
});

/*この例ではmessageに代入されている式が三行に渡って書かれている
条件演算子の返り値の型は真の時の式と偽の時の式の型によって決まる
上記の例の場合はこれらの式はString型なので条件演算子の返り値の型もString型になる

また、条件演算子の評価においては真の時の式と偽の時の式のどちらか一方、必要となった方のみが評価される
すなわち、返されない方の式は評価されず、その中に関数呼び出しなどがあっても実行されない
このように必要な式のみが評価されるというのもまた、論理演算子と共通した特徴である

条件部の式(? の前の式)の型についての補足
この部分には条件を与えなければいけないので一見すると真偽値型(boolean型)の値が求められるように思う
しかしながら、実際には条件として与える式の型は何でも構わない

boolean以外の型を持つ値が条件として与えられた場合は、その値はまず真偽値に変換してから条件判定に用いられる
たとえば、number型のnumを条件部に用いた num ? x : y という式は num が 0 または NaN 以外の時はxが返り、numが0またはNaNの時はyが返る
条件というくらいなので条件部には真偽値が用いられることが最も多いものの、それ以外の値が用いられる機会も十分ある
このような条件分岐のやり方もできるようになっていて損はない*/